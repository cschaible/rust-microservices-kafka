version: "2.1"
services:
  postgresql:
    image: postgres:15.0-alpine
    hostname: postgres
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: demo
      POSTGRES_USER: demouser
      POSTGRES_PASSWORD: secret
      PGPASSWORD: secret
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    mem_limit: 1024m

  mongodb1:
    image: mongo:6.0.2
    restart: always
    hostname: mongodb1
    container_name: mongodb1
    ports:
      - "27017:27017"
    #environment:
    #  MONGO_INITDB_ROOT_USERNAME: demouser
    #  MONGO_INITDB_ROOT_PASSWORD: secret
    command: mongod --replSet replica-set-1
    mem_limit: 768m

  mongoinit:
    image: mongo:6.0.2
    # Exit after executing the command
    restart: "no"
    hostname: minit
    container_name: minit
    depends_on:
      - mongodb1
    command: >
      mongosh --host mongodb1:27017 --eval 
      '
      db = (new Mongo("mongodb1:27017")).getDB("accommodation-service");
      config = {
      "_id" : "replica-set-1",
      "members" : [
        {
          "_id" : 0,
          "host" : "mongodb1:27017"
        }
      ]
      };
      rs.initiate(config);
      '
    mem_limit: 256m

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.2
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    mem_limit: 128m
    
  broker:
    image: confluentinc/cp-kafka:7.2.2
    hostname: broker
    container_name: broker
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_HEAP_OPTS: '-Xmx384m -Xms128m'
      KAFKA_JVM_PERFORMANCE_OPTS: '-client -XX:+UseG1GC -XX:+CMSClassUnloadingEnabled -XX:+CMSScavengeBeforeRemark -XX:+DisableExplicitGC -Djava.awt.headless=true'
    mem_limit: 768m

  schema-registry:
    image: confluentinc/cp-schema-registry:7.2.2
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      EXTRA_ARGS: '-Xmx384m -Xms64m'
    mem_limit: 768m

  jaeger:
    image: jaegertracing/all-in-one:1.38
    hostname: jaeger
    container_name: jaeger
    ports:
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "14268:14268"
      - "16685:16685"
      - "16686:16686"
      - "16687:16687"
    environment:
      SPAN_STORAGE_TYPE: 'badger'
      BADGER_DIRECTORY_KEY: '/badger/key'
      BADGER_DIRECTORY_VALUE: '/badger/data'